#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
业务员奖金计算系统 - 测试数据生成脚本
用于快速生成测试用的Excel文件
"""

import pandas as pd
from datetime import datetime

def generate_test_data():
    """生成测试数据Excel文件"""
    
    print("开始生成测试数据...")
    
    # 1. 生成员工基础信息表
    employee_data = pd.DataFrame([
        {'员工姓名': '张三', '标准奖金': 7000, '所属地区': '杭州', '业务类型': '五星', '备注': ''},
        {'员工姓名': '李四', '标准奖金': 6000, '所属地区': '杭州', '业务类型': '四星', '备注': ''},
        {'员工姓名': '王五', '标准奖金': 6500, '所属地区': '宁波', '业务类型': '五星', '备注': ''},
        {'员工姓名': '赵六', '标准奖金': 5500, '所属地区': '杭州', '业务类型': '三星', '备注': '试用期'},
        {'员工姓名': '钱七', '标准奖金': 7500, '所属地区': '金华', '业务类型': '五星', '备注': ''},
    ])
    
    print(f"✓ 生成员工信息: {len(employee_data)} 人")
    
    # 2. 生成任务分配表
    task_data = pd.DataFrame([
        {'负责人': '张三', '区域': '汇德隆', '1月': 40, '2月': 35, '3月': 45, '4月': 38, '5月': 42, '6月': 40, 
         '7月': 45, '8月': 40, '9月': 43, '10月': 48, '11月': 50, '12月': 55,
         'Q1': 120, 'Q2': 120, 'Q3': 128, 'Q4': 153},
        {'负责人': '李四', '区域': '永乐', '1月': 35, '2月': 32, '3月': 38, '4月': 35, '5月': 37, '6月': 36,
         '7月': 38, '8月': 35, '9月': 37, '10月': 40, '11月': 42, '12月': 45,
         'Q1': 105, 'Q2': 108, 'Q3': 110, 'Q4': 127},
        {'负责人': '王五', '区域': '国美', '1月': 30, '2月': 28, '3月': 32, '4月': 30, '5月': 31, '6月': 29,
         '7月': 33, '8月': 30, '9月': 32, '10月': 35, '11月': 37, '12月': 40,
         'Q1': 90, 'Q2': 90, 'Q3': 95, 'Q4': 112},
        {'负责人': '赵六', '区域': '苏宁', '1月': 25, '2月': 22, '3月': 28, '4月': 26, '5月': 27, '6月': 25,
         '7月': 28, '8月': 26, '9月': 27, '10月': 30, '11月': 32, '12月': 35,
         'Q1': 75, 'Q2': 78, 'Q3': 81, 'Q4': 97},
        {'负责人': '钱七', '区域': '五星', '1月': 45, '2月': 42, '3月': 48, '4月': 44, '5月': 46, '6月': 45,
         '7月': 50, '8月': 48, '9月': 49, '10月': 52, '11月': 55, '12月': 60,
         'Q1': 135, 'Q2': 135, 'Q3': 147, 'Q4': 167},
    ])
    
    print(f"✓ 生成任务分配: {len(task_data)} 人 × 12个月 + 4个季度")
    
    # 3. 生成销售员回款汇总表（包含月度明细）
    sales_data = pd.DataFrame([
        {'销售员': '张三', '销售组织': '杭州中冠电器', '销售部门': '杭州大区',
         '1月': 320000, '2月': 280000, '3月': 360000, '4月': 304000, '5月': 336000, '6月': 320000,
         '7月': 360000, '8月': 320000, '9月': 344000, '10月': 384000, '11月': 400000, '12月': 440000,
         '总收款': 4368000, '总退款': 8000, '回款': 4360000},
        {'销售员': '李四', '销售组织': '杭州中冠电器', '销售部门': '杭州大区',
         '1月': 245000, '2月': 224000, '3月': 266000, '4月': 245000, '5月': 259000, '6月': 252000,
         '7月': 266000, '8月': 245000, '9月': 259000, '10月': 280000, '11月': 294000, '12月': 315000,
         '总收款': 3150000, '总退款': 5000, '回款': 3145000},
        {'销售员': '王五', '销售组织': '宁波中冠电器', '销售部门': '宁波大区',
         '1月': 270000, '2月': 252000, '3月': 288000, '4月': 270000, '5月': 279000, '6月': 261000,
         '7月': 297000, '8月': 270000, '9月': 288000, '10月': 315000, '11月': 333000, '12月': 360000,
         '总收款': 3483000, '总退款': 3000, '回款': 3480000},
        {'销售员': '赵六', '销售组织': '杭州中冠电器', '销售部门': '杭州大区',
         '1月': 175000, '2月': 154000, '3月': 196000, '4月': 182000, '5月': 189000, '6月': 175000,
         '7月': 196000, '8月': 182000, '9月': 189000, '10月': 210000, '11月': 224000, '12月': 245000,
         '总收款': 2317000, '总退款': 2000, '回款': 2315000},
        {'销售员': '钱七', '销售组织': '金华中冠电器', '销售部门': '金华大区',
         '1月': 405000, '2月': 378000, '3月': 432000, '4月': 396000, '5月': 414000, '6月': 405000,
         '7月': 450000, '8月': 432000, '9月': 441000, '10月': 468000, '11月': 495000, '12月': 540000,
         '总收款': 5256000, '总退款': 6000, '回款': 5250000},
    ])
    
    print(f"✓ 生成回款数据: {len(sales_data)} 人 × 12个月")
    
    # 4. 生成211厨电表
    exam211_records = []
    employees = ['张三', '李四', '王五', '赵六', '钱七']
    areas = ['汇德隆', '永乐', '国美', '苏宁', '五星']
    
    for month in range(1, 13):
        for i, emp in enumerate(employees):
            # 生成不同的完成情况
            if emp == '张三':
                completed = min(10, 6 + month // 2)  # 逐月提升
            elif emp == '李四':
                completed = 7 if month % 2 == 0 else 8  # 波动
            elif emp == '王五':
                completed = 9  # 稳定高分
            elif emp == '赵六':
                completed = 5 if month <= 6 else 6  # 试用期后提升
            else:  # 钱七
                completed = 10  # 满分
            
            exam211_records.append({
                '月份': str(month),
                '具体地区': areas[i],
                '业务人员': emp,
                '任务': 10,
                '完成': completed,
                '备注': f'{month}月考核' if completed < 10 else ''
            })
    
    exam211_data = pd.DataFrame(exam211_records)
    
    print(f"✓ 生成211考核数据: {len(exam211_data)} 条记录")
    
    # 5. 保存到Excel文件
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    with pd.ExcelWriter(f'测试数据_{timestamp}.xlsx', engine='openpyxl') as writer:
        employee_data.to_excel(writer, sheet_name='员工基础信息表', index=False)
        task_data.to_excel(writer, sheet_name='任务分配表', index=False)
        sales_data.to_excel(writer, sheet_name='销售员回款汇总表', index=False)
        exam211_data.to_excel(writer, sheet_name='211厨电表', index=False)
    
    print(f"\n✅ 测试数据生成完成！")
    print(f"📁 文件名: 测试数据_{timestamp}.xlsx")
    print(f"\n包含以下工作表：")
    print(f"  1. 员工基础信息表 - {len(employee_data)} 行")
    print(f"  2. 任务分配表 - {len(task_data)} 行")
    print(f"  3. 销售员回款汇总表 - {len(sales_data)} 行")
    print(f"  4. 211厨电表 - {len(exam211_data)} 行")
    
    # 6. 生成独立的文件（与实际业务场景一致）
    print(f"\n正在生成独立文件...")
    
    employee_data.to_excel('测试_员工基础信息表.xlsx', index=False)
    task_data.to_excel('测试_任务分配表.xlsx', index=False)
    sales_data.to_excel('测试_销售员回款汇总表.xlsx', index=False)
    exam211_data.to_excel('测试_211厨电表.xlsx', index=False)
    
    print(f"✅ 独立文件生成完成！")
    print(f"  - 测试_员工基础信息表.xlsx")
    print(f"  - 测试_任务分配表.xlsx")
    print(f"  - 测试_销售员回款汇总表.xlsx")
    print(f"  - 测试_211厨电表.xlsx")
    
    # 7. 显示测试数据概览
    print(f"\n" + "="*60)
    print(f"测试数据概览")
    print(f"="*60)
    print(f"\n员工信息:")
    for _, emp in employee_data.iterrows():
        trial = " [试用期]" if emp['备注'] == '试用期' else ""
        print(f"  • {emp['员工姓名']}: {emp['所属地区']} - 标准奖金{emp['标准奖金']}元{trial}")
    
    print(f"\n8月份数据示例（用于测试月度计算）:")
    print(f"  张三: 任务40万, 回款32万, 完成率80% → 无回款负激励")
    print(f"  李四: 任务35万, 回款24.5万, 完成率70% → 扣10%回款负激励")
    print(f"  王五: 任务30万, 回款27万, 完成率90% → 宁波地区无负激励")
    print(f"  赵六: 任务26万, 回款18.2万, 完成率70% → 试用期无考核")
    print(f"  钱七: 任务48万, 回款43.2万, 完成率90% → 金华地区无负激励")
    
    print(f"\n第三季度数据（用于测试季度计算）:")
    print(f"  Q3包含7、8、9月")
    print(f"  张三: 季度任务128万, 回款102.4万, 完成率80% → 返还负激励")
    print(f"  李四: 季度任务110万, 回款77万, 完成率70% → 扣10%")
    
    print(f"\n" + "="*60)
    print(f"💡 使用提示:")
    print(f"="*60)
    print(f"1. 打开 salary-calculator.html")
    print(f"2. 上传以上4个独立的Excel文件")
    print(f"3. 选择8月进行月度计算测试")
    print(f"4. 选择Q3进行季度计算测试")
    print(f"5. 在211管理页面可以编辑211数据")
    print(f"\n预期结果:")
    print(f"  - 数据完整: 5人")
    print(f"  - 试用期: 1人（赵六）")
    print(f"  - 杭州地区员工会有回款负激励计算")
    print(f"  - 所有员工都有211考核数据")

if __name__ == '__main__':
    try:
        generate_test_data()
        print(f"\n✨ 全部完成！现在可以开始测试系统了。")
    except Exception as e:
        print(f"\n❌ 错误: {e}")
        print(f"\n请确保已安装必需的库:")
        print(f"  pip install pandas openpyxl")

